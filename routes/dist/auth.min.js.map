{"version":3,"sources":["auth.js"],"names":["express","require","bcrypt","User","Router","router","post","req","res","_req$body","username","email","password","role","user","salt","regeneratorRuntime","async","_context","prev","next","body","awrap","sent","abrupt","status","send","genSalt","hash","save","stop","_req$body2","token","_context2","findOne","compare","jwt","sign","_id"],"mappings":"aAAA,IAAMA,QAAUC,QAAQ,WAClBC,OAASD,QAAQ,YADjBD,IAAOC,QAAGA,gBAGVE,KAAOF,QAAQ,kBAFfC,OAASD,QAAQG,SAMvBC,OAAOC,KAAK,YAAa,SAAOC,EAAKC,GAAZ,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAAA,OAAAX,EAJzBF,EAAAc,KAAapB,EAIYQ,EAJZR,SAAQU,EAIIF,EAJJE,MAAAC,EAIIH,EAJJG,SAArBC,EAIyBJ,EAJzBI,KAIyBK,EAAAE,KAAA,EAAAJ,mBAAAM,MAHFlB,KAAAA,QAAvB,CAAAO,MAAAA,KAGyB,KAAA,EAAA,GAHnBN,EAGmBa,EAAAK,KAAA,OAAAL,EAAAM,OAAA,SAAbhB,EAAaiB,OAAA,KAAAC,KAAOnB,yBAAPW,EAAAE,KAAA,EAAA,MAAA,KAAA,EAAA,OAMrBN,EAAO,IAAIX,KAAK,CAAEO,SAAAA,EAAUC,MAAAA,EAAOC,SAAAA,EAAUC,KAAAA,IANxBK,EAAAE,KAAA,EAAAJ,mBAAAM,MAAApB,OAAAyB,QAAA,KAAA,KAAA,EAAA,OAAAZ,EAAAG,EAAAK,KAAAL,EAAAE,KAAA,GAAAJ,mBAAAM,MAAApB,OAAA0B,KAAAhB,EAAAG,IAAA,KAAA,GAAA,OAAAD,EAAAF,SAAAM,EAAAK,KAAAL,EAAAE,KAAA,GAAAJ,mBAAAM,MAAAR,EAAAe,QAAA,KAAA,GAAArB,EAAAkB,KAAAZ,GAAA,KAAA,GAAA,IAAA,MAAA,OAAAI,EAAAY,YAAAzB,OAAAC,KAAA,SAAA,SAAAC,EAAAC,GAAA,IAAAuB,EAAApB,EAAAC,EAAAE,EAAAkB,EAAA,OAAAhB,mBAAAC,MAAA,SAAAgB,GAAA,OAAA,OAAAA,EAAAd,KAAAc,EAAAb,MAAA,KAAA,EAAA,OAAAW,EAAAxB,EAAAc,KAGjBP,EAHiBiB,EAGjBjB,MAHiBF,EAAAmB,EAAAnB,SAAAqB,EAAAb,KAAA,EAAAJ,mBAAAM,MAAAnB,KAAA+B,QAAA,CAAAvB,MAAAA,KAAA,KAAA,EAAA,GAAAG,EAAAmB,EAAAV,KAAA,CAAAU,EAAAb,KAAA,EAAA,MAAA,OAAAa,EAAAT,OAAA,SAAAhB,EAAAiB,OAAA,KAAAC,KAAA,+BAAA,KAAA,EAAA,OAAAO,EAAAb,KAAA,EAAAJ,mBAAAM,MAAApB,OAAAiC,QAAAvB,EAAAE,EAAAF,WAAA,KAAA,EAAA,GAAAqB,EAAAV,KAAA,CAAAU,EAAAb,KAAA,GAAA,MAAA,OAAAa,EAAAT,OAAA,SAwBMhB,EAAIiB,OAAO,KAAKC,KAAK,+BAxB3B,KAAA,GA0BfM,EAAQI,IAAIC,KAAK,CAAEC,IAAKxB,EAAKwB,IAAKzB,KAAMC,EAAKD,MAAQ,cA1BtCL,EAAAkB,KAAAM,GAAA,KAAA,GAAA,IAAA,MAAA,OAAAC,EAAAH,YAMOnB,OAAAA,QAAKN","file":"auth.min.js","sourcesContent":["const express = require('express');\r\nconst bcrypt = require('bcryptjs');\r\nconst jwt = require('jsonwebtoken');\r\nconst User = require('../models/User');\r\nconst router = express.Router();\r\n\r\n\r\nrouter.post('/register', async (req, res) => {\r\n    const { username, email, password, role } = req.body;\r\n    \r\n    let user = await User.findOne({ email });\r\n    if (user) return res.status(400).send('User already exists.');\r\n\r\n    user = new User({ username, email, password, role });\r\n    const salt = await bcrypt.genSalt(10);\r\n    user.password = await bcrypt.hash(password, salt);\r\n    \r\n    await user.save();\r\n\r\n    // const token = jwt.sign({ _id: user._id, role: user.role }, 'jwt_secret');\r\n    res.send(user);\r\n});\r\n\r\n\r\nrouter.post('/login', async (req, res) => {\r\n    const { email, password } = req.body;\r\n\r\n    const user = await User.findOne({ email });\r\n    if (!user) return res.status(400).send('Invalid email or password.');\r\n\r\n    const validPassword = await bcrypt.compare(password, user.password);\r\n    if (!validPassword) return res.status(400).send('Invalid email or password.');\r\n\r\n    const token = jwt.sign({ _id: user._id, role: user.role }, 'jwt_secret');\r\n    res.send(token);\r\n});\r\n\r\nmodule.exports = router;\r\n"]}