{"version":3,"sources":["auth.js"],"names":["express","require","bcrypt","jwt","User","router","Router","post","req","res","body","username","email","password","role","findOne","user","status","send","genSalt","salt","hash","save","compare","validPassword","token","sign","_id","module","exports"],"mappings":";;AAAA,IAAMA,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB;;AACA,IAAMC,MAAM,GAAGD,OAAO,CAAC,UAAD,CAAtB;;AACA,IAAME,GAAG,GAAGF,OAAO,CAAC,cAAD,CAAnB;;AACA,IAAMG,IAAI,GAAGH,OAAO,CAAC,gBAAD,CAApB;;AACA,IAAMI,MAAM,GAAGL,OAAO,CAACM,MAAR,EAAf;AAGAD,MAAM,CAACE,IAAP,CAAY,WAAZ,EAAyB,iBAAOC,GAAP,EAAYC,GAAZ;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,sBACuBD,GAAG,CAACE,IAD3B,EACbC,QADa,aACbA,QADa,EACHC,KADG,aACHA,KADG,EACIC,QADJ,aACIA,QADJ,EACcC,IADd,aACcA,IADd;AAAA;AAAA,0CAGJV,IAAI,CAACW,OAAL,CAAa;AAAEH,YAAAA,KAAK,EAALA;AAAF,WAAb,CAHI;;AAAA;AAGjBI,UAAAA,IAHiB;;AAAA,eAIjBA,IAJiB;AAAA;AAAA;AAAA;;AAAA,2CAIJP,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,sBAArB,CAJI;;AAAA;AAMrBF,UAAAA,IAAI,GAAG,IAAIZ,IAAJ,CAAS;AAAEO,YAAAA,QAAQ,EAARA,QAAF;AAAYC,YAAAA,KAAK,EAALA,KAAZ;AAAmBC,YAAAA,QAAQ,EAARA,QAAnB;AAA6BC,YAAAA,IAAI,EAAJA;AAA7B,WAAT,CAAP;AANqB;AAAA,0CAOFZ,MAAM,CAACiB,OAAP,CAAe,EAAf,CAPE;;AAAA;AAOfC,UAAAA,IAPe;AAAA;AAAA,0CAQClB,MAAM,CAACmB,IAAP,CAAYR,QAAZ,EAAsBO,IAAtB,CARD;;AAAA;AAQrBJ,UAAAA,IAAI,CAACH,QARgB;AAAA;AAAA,0CAUfG,IAAI,CAACM,IAAL,EAVe;;AAAA;AAYrB;AACAb,UAAAA,GAAG,CAACS,IAAJ,CAASF,IAAT;;AAbqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAzB;AAiBAX,MAAM,CAACE,IAAP,CAAY,QAAZ,EAAsB,kBAAOC,GAAP,EAAYC,GAAZ;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,uBACUD,GAAG,CAACE,IADd,EACVE,KADU,cACVA,KADU,EACHC,QADG,cACHA,QADG;AAAA;AAAA,0CAGCT,IAAI,CAACW,OAAL,CAAa;AAAEH,YAAAA,KAAK,EAALA;AAAF,WAAb,CAHD;;AAAA;AAGZI,UAAAA,IAHY;;AAAA,cAIbA,IAJa;AAAA;AAAA;AAAA;;AAAA,4CAIAP,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,4BAArB,CAJA;;AAAA;AAAA;AAAA,0CAMUhB,MAAM,CAACqB,OAAP,CAAeV,QAAf,EAAyBG,IAAI,CAACH,QAA9B,CANV;;AAAA;AAMZW,UAAAA,aANY;;AAAA,cAObA,aAPa;AAAA;AAAA;AAAA;;AAAA,4CAOSf,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,4BAArB,CAPT;;AAAA;AASZO,UAAAA,KATY,GASJtB,GAAG,CAACuB,IAAJ,CAAS;AAAEC,YAAAA,GAAG,EAAEX,IAAI,CAACW,GAAZ;AAAiBb,YAAAA,IAAI,EAAEE,IAAI,CAACF;AAA5B,WAAT,EAA6C,YAA7C,CATI;AAUlBL,UAAAA,GAAG,CAACS,IAAJ,CAASO,KAAT;;AAVkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAtB;AAaAG,MAAM,CAACC,OAAP,GAAiBxB,MAAjB","sourcesContent":["const express = require('express');\r\nconst bcrypt = require('bcryptjs');\r\nconst jwt = require('jsonwebtoken');\r\nconst User = require('../models/User');\r\nconst router = express.Router();\r\n\r\n\r\nrouter.post('/register', async (req, res) => {\r\n    const { username, email, password, role } = req.body;\r\n    \r\n    let user = await User.findOne({ email });\r\n    if (user) return res.status(400).send('User already exists.');\r\n\r\n    user = new User({ username, email, password, role });\r\n    const salt = await bcrypt.genSalt(10);\r\n    user.password = await bcrypt.hash(password, salt);\r\n    \r\n    await user.save();\r\n\r\n    // const token = jwt.sign({ _id: user._id, role: user.role }, 'jwt_secret');\r\n    res.send(user);\r\n});\r\n\r\n\r\nrouter.post('/login', async (req, res) => {\r\n    const { email, password } = req.body;\r\n\r\n    const user = await User.findOne({ email });\r\n    if (!user) return res.status(400).send('Invalid email or password.');\r\n\r\n    const validPassword = await bcrypt.compare(password, user.password);\r\n    if (!validPassword) return res.status(400).send('Invalid email or password.');\r\n\r\n    const token = jwt.sign({ _id: user._id, role: user.role }, 'jwt_secret');\r\n    res.send(token);\r\n});\r\n\r\nmodule.exports = router;\r\n"],"file":"auth.dev.js"}